{
    "$schema": "http://json.schemastore.org/template",
    "author": "Xilophor",
    "classifications": [ "Content Warning", "Mod", "BepInEx", "Harmony" ],
    "identity": "Xilophor.ContentWarning.Harmony",
    "name": "Content Warning Harmony Mod Template",
    "shortName": [ "cwharmony" ],
    "sourceName": "Harmony.ModTemplate",
    "tags": {
        "language": "C#",
        "type": "project"
    },
    "preferNameDirectory": true,
    "forms": {
        "namespace": {
            "identifier": "safe_namespace"
        },
        "classname": {
            "identifier": "safe_name"
        },
        "identity": {
            "identifier": "identity"
        }
    },
    "symbols": {
        "ModGuid": {
            "type": "parameter",
            "description": "The global identifier specific to your mod. (Ex. username.ModName)",
            "datatype": "text"
        },
        "ModGuidGen": {
            "type": "generated",
            "generator": "coalesce",
            "datatype": "text",
            "parameters": {
                "sourceVariableName": "ModGuid",
                "fallbackVariableName": "name"
            }
        },
        "ModGuidReplacer": {
            "type": "generated",
            "generator": "regex",
            "datatype": "text",
            "parameters": {
                "source": "ModGuidGen",
                "steps": [
                    {
                        "regex": "[^a-zA-Z0-9\\._\\-]+",
                        "replacement": ""
                    }
                ]
            },
            "replaces": "{ModGuid}"
        },
        "NamespaceReplacer": {
            "type": "derived",
            "valueSource": "name",
            "valueTransform": "namespace",
            "replaces": "Harmony._ModTemplate"
        },
        "ClassnameReplacer": {
            "type": "derived",
            "valueSource": "name",
            "valueTransform": "classname",
            "replaces": "Harmony__ModTemplate",
            "fileRename": "Harmony__ModTemplate"
        },
        "IdentityReplacer": {
            "type": "derived",
            "valueSource": "name",
            "valueTransform": "identity",
            "replaces": "{Product}"
        },
        "Version": {
            "type": "parameter",
            "description": "The initial version of your mod, in semantic versioning. (Ex. 1.0.0)",
            "datatype": "text",
            "isEnabled": "!UseMinVer",
            "defaultValue": "1.0.0",
            "replaces": "{Version}"
        },
        "BepInExPluginLocation": {
            "type": "parameter",
            "description": "The file path of the plugin or profile directory to copy to for quick testing. If left blank, the mod will not be copied.",
            "datatype": "text",
            "defaultValue": ""
        },
        "BepInExPluginLocationReplacer": {
            "type": "generated",
            "generator": "regex",
            "datatype": "text",
            "parameters": {
                "source": "BepInExPluginLocation",
                "steps": [
                    {
                        "regex": "/.*[^/]$",
                        "replacement": "$&/"
                    },
                    {
                        "regex": "\\\\.*[^\\\\]$",
                        "replacement": "$&\\"
                    }
                ]
            },
            "replaces": "{PluginDirectory}"
        },
        "ReferenceGameLibsPackage": {
            "type": "parameter",
            "description": "Use the GameLibs NuGet Package to avoid manually referencing game files.",
            "datatype": "bool",
            "defaultValue": "true"
        },
        "PublicizeGameAssemblies": {
            "type": "parameter",
            "description": "Publicize the Game Assemblies to access internal or private classes, fields, methods, and properties.",
            "datatype": "bool",
            "defaultValue": "false"
        },
        "UseMinVer": {
            "type": "parameter",
            "description": "Instead of manually changing the mod version, use MinVer and automatically update the mod version based off of git tags (ie 'v1.2.3'). Only enable if you are using git vsc (ie GitHub).",
            "datatype": "bool",
            "defaultValue": "false"
        }
    },
    "sources": [
        {
            "exclude": [
                "**/[Bb]in/**",
                "**/[Oo]bj/**",
                ".template.config/**/*",
                "**/*.filelist",
                "**/*.lock.json",
                "**/*.cmd",
                "**/*.sh",
                "**/*.user"
            ],
            "modifiers": [
                {
                    "condition": "BepInExPluginLocation != \"\"",
                    "include": [
                        "**.user"
                    ]
                }
            ]
        }
    ],
    "postActions": [
        {
            "description": "Add projects to solution",
            "manualInstructions": [ { "text": "Add generated project to solution manually." } ],
            "args": {
                "solutionFolder": "src",
                "projectFiles": [ "Harmony.ModTemplate.csproj" ]
            },
            "actionId": "D396686C-DE0E-4DE6-906D-291CD29FC5DE",
            "continueOnError": true
        }
    ]
}
